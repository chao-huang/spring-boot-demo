# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "demo"
spring.datasource.url = jdbc:mysql://localhost:3306/demo?useSSL=false

# Username and password
spring.datasource.username = demo
spring.datasource.password = demo

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update, none): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = none

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = JDBC CONFIG SERVER
# ===============================

# Spring Cloud Config Server provides several options to store configuration for an application.
# Set here to use JdbcEnvironmentRepository which allows to store its configuration in database.

# Embedded config server with JDBC backend
spring.cloud.config.server.bootstrap = true
spring.cloud.config.server.composite[0].type = native
spring.cloud.config.server.composite[0].search-locations = classpath:/config, file:./config, file://${user.home}/config-repo
spring.cloud.config.server.composite[1].type = jdbc
spring.cloud.config.server.composite[1].sql = select name, value from properties where application=? and profile=? and label=?

# Specify application, profile and label to search the JDBC backend properties
spring.application.name = demo
spring.profiles.active = composite
spring.cloud.config.profile = default

# Endpoint IDs that should be included or '*' for all.
management.endpoints.web.exposure.include = health,info,env,refresh

# ===============================
# = DEV SETTINGS
# ===============================

server.port = 3000
spring.output.ansi.enabled = always
#logging.level.sql = debug
#logging.level.org.springframework.jdbc.core = TRACE